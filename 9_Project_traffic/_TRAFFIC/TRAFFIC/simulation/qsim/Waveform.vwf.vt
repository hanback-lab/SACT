// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/18/2025 13:26:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TRAFFIC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TRAFFIC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire E_GREEN;
wire E_LEFT;
wire E_RED;
wire E_WG;
wire E_WR;
wire E_YELLOW;
wire N_GREEN;
wire N_LEFT;
wire N_RED;
wire N_WG;
wire N_WR;
wire N_YELLOW;
wire S_GREEN;
wire S_LEFT;
wire S_RED;
wire S_WG;
wire S_WR;
wire S_YELLOW;
wire SEL_E;
wire SEL_N;
wire SEL_S;
wire SEL_W;
wire W_GREEN;
wire W_LEFT;
wire W_RED;
wire W_WG;
wire W_WR;
wire W_YELLOW;

// assign statements (if any)                          
TRAFFIC i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.E_GREEN(E_GREEN),
	.E_LEFT(E_LEFT),
	.E_RED(E_RED),
	.E_WG(E_WG),
	.E_WR(E_WR),
	.E_YELLOW(E_YELLOW),
	.N_GREEN(N_GREEN),
	.N_LEFT(N_LEFT),
	.N_RED(N_RED),
	.N_WG(N_WG),
	.N_WR(N_WR),
	.N_YELLOW(N_YELLOW),
	.S_GREEN(S_GREEN),
	.S_LEFT(S_LEFT),
	.S_RED(S_RED),
	.S_WG(S_WG),
	.S_WR(S_WR),
	.S_YELLOW(S_YELLOW),
	.SEL_E(SEL_E),
	.SEL_N(SEL_N),
	.SEL_S(SEL_S),
	.SEL_W(SEL_W),
	.W_GREEN(W_GREEN),
	.W_LEFT(W_LEFT),
	.W_RED(W_RED),
	.W_WG(W_WG),
	.W_WR(W_WR),
	.W_YELLOW(W_YELLOW)
);
initial 
begin 
#10000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 
endmodule

